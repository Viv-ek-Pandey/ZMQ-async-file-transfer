  18/10/2023   09:11.00  terraform apply -var-file ./gcp.tfvars

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_firewall.dedup_firewall_egress will be created
  + resource "google_compute_firewall" "dedup_firewall_egress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = [
          + "0.0.0.0/0",
        ]
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-dedup"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_tags        = [
          + "dedup-node",
        ]

      + allow {
          + ports    = []
          + protocol = "all"
        }
    }

  # google_compute_firewall.dedup_firewall_ingress will be created
  + resource "google_compute_firewall" "dedup_firewall_ingress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-dedup"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + source_tags        = [
          + "dedup-node",
        ]

      + allow {
          + ports    = [
              + "5005",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.mgmt_firewall_egress will be created
  + resource "google_compute_firewall" "mgmt_firewall_egress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = [
          + "0.0.0.0/0",
        ]
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-mgmt"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_tags        = [
          + "mgmt-server",
        ]

      + allow {
          + ports    = [
              + "5000",
              + "5001",
              + "5002",
              + "5003",
              + "5005",
              + "443",
              + "3308",
              + "5985",
              + "5986",
              + "902",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.mgmt_firewall_ingress will be created
  + resource "google_compute_firewall" "mgmt_firewall_ingress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-mgmt"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + source_tags        = [
          + "mgmt-server",
        ]

      + allow {
          + ports    = [
              + "3308",
              + "5000",
              + "5001",
              + "5002",
              + "5003",
              + "22",
              + "902",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.prep_firewall_egress will be created
  + resource "google_compute_firewall" "prep_firewall_egress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = [
          + "0.0.0.0/0",
        ]
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-prep"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_tags        = [
          + "prep-node",
        ]

      + allow {
          + ports    = []
          + protocol = "all"
        }
    }

  # google_compute_firewall.prep_firewall_ingress will be created
  + resource "google_compute_firewall" "prep_firewall_ingress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-prep"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + source_tags        = [
          + "prep-node",
        ]

      + allow {
          + ports    = [
              + "5985",
              + "5986",
              + "3389",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.repl_firewall_egress will be created
  + resource "google_compute_firewall" "repl_firewall_egress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = [
          + "0.0.0.0/0",
        ]
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-repl"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_tags        = [
          + "repl-node",
        ]

      + allow {
          + ports    = [
              + "5000",
              + "5001",
              + "5002",
              + "5003",
              + "5005",
              + "443",
              + "3308",
              + "5985",
              + "5986",
              + "902",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.repl_firewall_ingress will be created
  + resource "google_compute_firewall" "repl_firewall_ingress" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "dm-repl"
      + network            = "default"
      + priority           = 1000
      + project            = "sandbox-service-a"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + source_tags        = [
          + "repl-node",
        ]

      + allow {
          + ports    = [
              + "5000",
              + "5001",
              + "5002",
              + "5003",
              + "22",
              + "902",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_instance.dedup_node[0] will be created
  + resource "google_compute_instance" "dedup_node" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + current_status       = (known after apply)
      + deletion_protection  = false
      + effective_labels     = (known after apply)
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "n2-standard-2"
      + metadata             = {
          + "ssh-keys" = "souravpatjoshi"
        }
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = "dm-dedup-node"
      + project              = "sandbox-service-a"
      + self_link            = (known after apply)
      + tags                 = [
          + "dedup-node",
        ]
      + tags_fingerprint     = (known after apply)
      + terraform_labels     = (known after apply)
      + zone                 = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "dm-repl-gcp-1-0-0-1524"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = "default"
          + subnetwork_project          = (known after apply)
        }
    }

  # google_compute_instance.mgmt_server[0] will be created
  + resource "google_compute_instance" "mgmt_server" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + current_status       = (known after apply)
      + deletion_protection  = false
      + effective_labels     = (known after apply)
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "n2-standard-2"
      + metadata             = {
          + "ssh-keys" = "souravpatjoshi"
        }
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = "dm-mgmt-server"
      + project              = "sandbox-service-a"
      + self_link            = (known after apply)
      + tags                 = [
          + "mgmt-server",
        ]
      + tags_fingerprint     = (known after apply)
      + terraform_labels     = (known after apply)
      + zone                 = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "dm-mgmt-gcp-1-0-0-1524"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = "default"
          + subnetwork_project          = (known after apply)
        }
    }

  # google_compute_instance.prep_node[0] will be created
  + resource "google_compute_instance" "prep_node" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + current_status       = (known after apply)
      + deletion_protection  = false
      + effective_labels     = (known after apply)
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "n2-standard-2"
      + metadata             = {
          + "ssh-keys" = "souravpatjoshi"
        }
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = (known after apply)
      + project              = "sandbox-service-a"
      + self_link            = (known after apply)
      + tags                 = [
          + "prep-node",
        ]
      + tags_fingerprint     = (known after apply)
      + terraform_labels     = (known after apply)
      + zone                 = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "dm-win-prep-cis-gcp-1-0-0-1166"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = "default"
          + subnetwork_project          = (known after apply)
        }
    }

  # google_compute_instance.repl_node[0] will be created
  + resource "google_compute_instance" "repl_node" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + current_status       = (known after apply)
      + deletion_protection  = false
      + effective_labels     = (known after apply)
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "n2-standard-2"
      + metadata             = {
          + "ssh-keys" = "souravpatjoshi"
        }
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = (known after apply)
      + project              = "sandbox-service-a"
      + self_link            = (known after apply)
      + tags                 = [
          + "repl-node",
        ]
      + tags_fingerprint     = (known after apply)
      + terraform_labels     = (known after apply)
      + zone                 = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "dm-repl-gcp-1-0-0-1524"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = "default"
          + subnetwork_project          = (known after apply)
        }
    }

  # google_compute_instance.repl_node[1] will be created
  + resource "google_compute_instance" "repl_node" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + current_status       = (known after apply)
      + deletion_protection  = false
      + effective_labels     = (known after apply)
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "n2-standard-2"
      + metadata             = {
          + "ssh-keys" = "souravpatjoshi"
        }
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = (known after apply)
      + project              = "sandbox-service-a"
      + self_link            = (known after apply)
      + tags                 = [
          + "repl-node",
        ]
      + tags_fingerprint     = (known after apply)
      + terraform_labels     = (known after apply)
      + zone                 = "us-central1-a"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "dm-repl-gcp-1-0-0-1524"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = "default"
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = "default"
          + subnetwork_project          = (known after apply)
        }
    }

  # google_project_iam_custom_role.custom_role will be created
  + resource "google_project_iam_custom_role" "custom_role" {
      + deleted     = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
      + permissions = [
          + "compute.addresses.list",
          + "compute.diskTypes.get",
          + "compute.diskTypes.list",
          + "compute.disks.create",
          + "compute.disks.createSnapshot",
          + "compute.disks.delete",
          + "compute.disks.get",
          + "compute.disks.list",
          + "compute.disks.use",
          + "compute.firewalls.list",
          + "compute.instances.attachDisk",
          + "compute.instances.create",
          + "compute.instances.delete",
          + "compute.instances.detachDisk",
          + "compute.instances.get",
          + "compute.instances.list",
          + "compute.instances.setMetadata",
          + "compute.instances.setTags",
          + "compute.instances.start",
          + "compute.instances.stop",
          + "compute.instances.updateDisplayDevice",
          + "compute.networks.updatePolicy",
          + "compute.projects.get",
          + "compute.snapshots.create",
          + "compute.snapshots.delete",
          + "compute.snapshots.useReadOnly",
          + "compute.subnetworks.get",
          + "compute.subnetworks.list",
          + "compute.subnetworks.use",
          + "compute.subnetworks.useExternalIp",
          + "compute.zoneOperations.get",
          + "iam.serviceaccountuser",
        ]
      + project     = "sandbox-service-a"
      + role_id     = "Editor"
      + stage       = "GA"
      + title       = "datamotive"
    }

  # google_service_account.service_account will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "datamotive-service-account"
      + disabled     = false
      + display_name = "datamotive-service-account"
      + email        = (known after apply)
      + id           = (known after apply)
      + member       = (known after apply)
      + name         = (known after apply)
      + project      = "sandbox-service-a"
      + unique_id    = (known after apply)
    }

  # google_service_account_iam_binding.example_binding will be created
  + resource "google_service_account_iam_binding" "example_binding" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + members            = (known after apply)
      + role               = (known after apply)
      + service_account_id = (known after apply)
    }

Plan: 16 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + custom_role     = (known after apply)
  + dedup_node      = {
      + ID   = [
          + (known after apply),
        ]
      + Name = [
          + "dm-dedup-node",
        ]
    }
  + mgmt_server     = {
      + ID   = [
          + (known after apply),
        ]
      + Name = [
          + "dm-mgmt-server",
        ]
    }
  + prep_node       = {
      + ID   = [
          + (known after apply),
        ]
      + Name = [
          + (known after apply),
        ]
    }
  + repl_node       = {
      + ID   = [
          + (known after apply),
          + (known after apply),
        ]
      + Name = [
          + (known after apply),
          + (known after apply),
        ]
    }
  + service_account = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_firewall.prep_firewall_ingress: Creating...
google_compute_firewall.repl_firewall_egress: Creating...
google_service_account.service_account: Creating...
google_compute_firewall.mgmt_firewall_egress: Creating...
google_compute_firewall.mgmt_firewall_ingress: Creating...
google_compute_firewall.prep_firewall_egress: Creating...
google_project_iam_custom_role.custom_role: Creating...
google_compute_instance.prep_node[0]: Creating...
google_compute_instance.repl_node[1]: Creating...
google_compute_instance.dedup_node[0]: Creating...
google_compute_firewall.repl_firewall_ingress: Creating...
google_compute_instance.repl_node[0]: Creating...
google_compute_instance.mgmt_server[0]: Creating...
google_service_account.service_account: Creation complete after 3s [id=projects/sandbox-service-a/serviceAccounts/datamotive-service-account@sandbox-service-a.iam.gserviceaccount.com]
google_compute_firewall.dedup_firewall_ingress: Creating...
google_compute_firewall.dedup_firewall_egress: Creating...
google_compute_firewall.prep_firewall_ingress: Still creating... [10s elapsed]
google_compute_firewall.repl_firewall_egress: Still creating... [10s elapsed]
google_compute_firewall.mgmt_firewall_ingress: Still creating... [10s elapsed]
google_compute_instance.repl_node[1]: Still creating... [10s elapsed]
google_compute_instance.prep_node[0]: Still creating... [10s elapsed]
google_compute_instance.dedup_node[0]: Still creating... [10s elapsed]
google_compute_instance.repl_node[0]: Still creating... [10s elapsed]
google_compute_instance.mgmt_server[0]: Still creating... [10s elapsed]
google_compute_firewall.repl_firewall_egress: Creation complete after 13s [id=projects/sandbox-service-a/global/firewalls/dm-repl]
google_compute_firewall.prep_firewall_ingress: Creation complete after 13s [id=projects/sandbox-service-a/global/firewalls/dm-prep]
google_compute_firewall.mgmt_firewall_ingress: Creation complete after 13s [id=projects/sandbox-service-a/global/firewalls/dm-mgmt]
google_compute_firewall.dedup_firewall_egress: Still creating... [10s elapsed]
google_compute_firewall.dedup_firewall_egress: Creation complete after 13s [id=projects/sandbox-service-a/global/firewalls/dm-dedup]
google_compute_instance.repl_node[1]: Creation complete after 18s [id=projects/sandbox-service-a/zones/us-central1-a/instances/dm-repl-node-ee9b2317-1a91-ea46-6bf1-2f58ec830a42]
google_compute_instance.prep_node[0]: Creation complete after 18s [id=projects/sandbox-service-a/zones/us-central1-a/instances/dm-prep-node-5f208e39-a0db-a69b-74a5-d06918afa0e0]
google_compute_instance.dedup_node[0]: Creation complete after 20s [id=projects/sandbox-service-a/zones/us-central1-a/instances/dm-dedup-node]
google_compute_instance.mgmt_server[0]: Creation complete after 19s [id=projects/sandbox-service-a/zones/us-central1-a/instances/dm-mgmt-server]
google_compute_instance.repl_node[0]: Creation complete after 19s [id=projects/sandbox-service-a/zones/us-central1-a/instances/dm-repl-node-a36f8f22-2fe2-64c1-d9bd-6742c954dcc4]
╷
│ Error: Error creating the custom project role projects/sandbox-service-a/roles/Editor: googleapi: Error 403: You don't have permission to create a role in projects/sandbox-service-a., forbidden
│
│   with google_project_iam_custom_role.custom_role,
│   on main.tf line 13, in resource "google_project_iam_custom_role" "custom_role":
│   13: resource "google_project_iam_custom_role" "custom_role" {
│
╵
╷
│ Error: Error creating Firewall: googleapi: Error 409: The resource 'projects/sandbox-service-a/global/firewalls/dm-mgmt' already exists, alreadyExists
│
│   with google_compute_firewall.mgmt_firewall_egress,
│   on main.tf line 64, in resource "google_compute_firewall" "mgmt_firewall_egress":
│   64: resource "google_compute_firewall" "mgmt_firewall_egress" {
│
╵
╷
│ Error: Error creating Firewall: googleapi: Error 409: The resource 'projects/sandbox-service-a/global/firewalls/dm-repl' already exists, alreadyExists
│
│   with google_compute_firewall.repl_firewall_ingress,
│   on main.tf line 74, in resource "google_compute_firewall" "repl_firewall_ingress":
│   74: resource "google_compute_firewall" "repl_firewall_ingress" {
│
╵
╷
│ Error: Error creating Firewall: googleapi: Error 409: The resource 'projects/sandbox-service-a/global/firewalls/dm-dedup' already exists, alreadyExists
│
│   with google_compute_firewall.dedup_firewall_ingress,
│   on main.tf line 94, in resource "google_compute_firewall" "dedup_firewall_ingress":
│   94: resource "google_compute_firewall" "dedup_firewall_ingress" {
│
╵
╷
│ Error: Error creating Firewall: googleapi: Error 409: The resource 'projects/sandbox-service-a/global/firewalls/dm-prep' already exists, alreadyExists
│
│   with google_compute_firewall.prep_firewall_egress,
│   on main.tf line 123, in resource "google_compute_firewall" "prep_firewall_egress":
│  123: resource "google_compute_firewall" "prep_firewall_egress" {
